// <auto-generated />
using System;
using FastFoodOperator.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFoodOperator.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250503150659_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComboComboGroup", b =>
                {
                    b.Property<int>("ComboGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("CombosId")
                        .HasColumnType("int");

                    b.HasKey("ComboGroupsId", "CombosId");

                    b.HasIndex("CombosId");

                    b.ToTable("ComboGroupCombo", (string)null);
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainComboProductId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 24.99m,
                            MainComboProductId = 1,
                            Name = "Cheeseburger Combo"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 29.99m,
                            MainComboProductId = 2,
                            Name = "BigMac Combo"
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DefaultComboProductId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultComboProductId");

                    b.ToTable("ComboGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sides"
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComboGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ComboId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultVariantId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComboGroupId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DefaultVariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComboProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComboId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComboId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            ComboGroupId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            ComboGroupId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            ComboGroupId = 2,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            ComboGroupId = 2,
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboTag", b =>
                {
                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ComboId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ComboTag");

                    b.HasData(
                        new
                        {
                            ComboId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ComboId = 1,
                            TagId = 6
                        },
                        new
                        {
                            ComboId = 2,
                            TagId = 1
                        },
                        new
                        {
                            ComboId = 2,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lettuce",
                            PriceModifier = 0.50m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tomato",
                            PriceModifier = 0.50m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pickles",
                            PriceModifier = 0.25m
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerNote = "5kg extra onion",
                            OrderNumber = 1001,
                            OrderStatus = 2,
                            StartedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CompletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 1, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerNote = "no peanuts",
                            OrderNumber = 1002,
                            OrderStatus = 0,
                            StartedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.OrderCombo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Products")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCombos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComboName = "Bajs och kiss",
                            FinalPrice = 0m,
                            OrderId = 1,
                            Products = "",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            ComboName = "Ägg och bacon",
                            FinalPrice = 0m,
                            OrderId = 2,
                            Products = "",
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.PrimitiveCollection<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinalPrice = 0m,
                            Ingredients = "[]",
                            OrderId = 1,
                            ProductName = "Bajskorv",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            FinalPrice = 0m,
                            Ingredients = "[]",
                            OrderId = 1,
                            ProductName = "Skurhinksmilkshake",
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            FinalPrice = 0m,
                            Ingredients = "[]",
                            OrderId = 2,
                            ProductName = "Pannkakor",
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("DefaultVariantId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 14.99m,
                            Description = "A classic cheeseburger",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-cheeseburger-NEW:nutrition-calculator-tile",
                            Name = "Cheeseburger"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 64.99m,
                            Description = "A classic big mac",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-bigmac-NY2:nutrition-calculator-tile",
                            Name = "Big Mac"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 9.99m,
                            Description = "Refreshing soda",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-cocacola-original-medium:nutrition-calculator-tile",
                            Name = "Coca-Cola"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 9.99m,
                            Description = "Refreshing soda",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-cocacola-original-medium:nutrition-calculator-tile",
                            Name = "Coca-Cola Zero"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 19.99m,
                            Description = "Crispy golden fries",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-accessories-french-fries-mellan2:nutrition-calculator-tile",
                            Name = "French Fries"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 39.99m,
                            Description = "Crispy nuggies",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-chicken-mcnuggets-4p-NEW:nutrition-calculator-tile",
                            Name = "Chicken Nuggets"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 35.00m,
                            Description = "Two beef patties with cheese",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-double-cheeseburger-NEW:nutrition-calculator-tile",
                            Name = "Double Cheeseburger"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 51.00m,
                            Description = "Triple-stacked cheesy classic",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-triple-cheeseburger-NEW:nutrition-calculator-tile",
                            Name = "Triple Cheeseburger"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 80.00m,
                            Description = "¼-lb beef, cheese & onions",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-qp-cheese-NEW:nutrition-calculator-tile",
                            Name = "Quarter Pounder Cheese"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 77.00m,
                            Description = "Swedish McD classic with fresh veggies",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-mcfeast-NEW:nutrition-calculator-tile",
                            Name = "McFeast"
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 67.00m,
                            Description = "Beef, bacon & chili béarnaise sauce",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-creamychipotle:nutrition-calculator-tile",
                            Name = "Chili Bearnaise"
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 79.00m,
                            Description = "Emmentaler, red onion & Tasty sauce",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-tasty_4_1-burger:nutrition-calculator-tile",
                            Name = "Tasty Burger"
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 105.00m,
                            Description = "Tasty with crispy bacon",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-tasty-bacon_4_1-burger:nutrition-calculator-tile",
                            Name = "Tasty Bacon"
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 83.00m,
                            Description = "Crispy chicken fillet sandwich",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-chickenfish-mccrispy:nutrition-calculator-tile",
                            Name = "McCrispy"
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 95.00m,
                            Description = "McCrispy with spicy sambal sauce",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-chickenfish-mcrispy-spicy2:nutrition-calculator-tile",
                            Name = "McCrispy Spicy"
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 63.00m,
                            Description = "Classic mayo & lettuce chicken burger",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-burgers-mcchicken-NEW:nutrition-calculator-tile",
                            Name = "McChicken"
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 24.00m,
                            Description = "Orange soda",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-fanta-orange-medium:nutrition-calculator-tile",
                            Name = "Fanta"
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 24.00m,
                            Description = "Tropical fruit soda",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-fanta-exotic-medium:nutrition-calculator-tile",
                            Name = "Fanta Exotic"
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 24.00m,
                            Description = "Sugar-free lemon-lime soda",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-sprite-zero-medium:nutrition-calculator-tile",
                            Name = "Sprite Zero Sugar"
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = 41.00m,
                            Description = "McCafé organic latte",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-LatteVaniljCaramel:nutrition-calculator-tile",
                            Name = "Latte"
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = 41.00m,
                            Description = "Foamy espresso-based coffee",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-Cappuccino-NEW:nutrition-calculator-tile",
                            Name = "Cappuccino"
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = 32.00m,
                            Description = "Single espresso shot",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-Espresso-Cortado-NEW:nutrition-calculator-tile",
                            Name = "Espresso"
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = 25.00m,
                            Description = "Creamy O’Boy hot chocolate",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-Choklad:nutrition-calculator-tile",
                            Name = "Hot Chocolate"
                        },
                        new
                        {
                            Id = 24,
                            BasePrice = 34.00m,
                            Description = "Cloudy apple juice",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-drinks-godmorgon-apple:nutrition-calculator-tile",
                            Name = "God Morgon Äppeljuice"
                        },
                        new
                        {
                            Id = 25,
                            BasePrice = 18.00m,
                            Description = "Crispy pastry with apple filling",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-desserts-applepie:nutrition-calculator-tile",
                            Name = "Apple Pie"
                        },
                        new
                        {
                            Id = 26,
                            BasePrice = 24.00m,
                            Description = "Soft-serve with hot fudge",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-sundae-chocolate:nutrition-calculator-tile",
                            Name = "Sundae Chocolate"
                        },
                        new
                        {
                            Id = 27,
                            BasePrice = 35.00m,
                            Description = "Soft-serve blended with Oreo pieces",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-desserts-mcflurry-oreo:nutrition-calculator-tile",
                            Name = "McFlurry Oreo"
                        },
                        new
                        {
                            Id = 28,
                            BasePrice = 32.00m,
                            Description = "Rich three-chocolate cookie",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-desserts-triplechocolatecookie:nutrition-calculator-tile",
                            Name = "Triple Chocolate Cookie"
                        },
                        new
                        {
                            Id = 29,
                            BasePrice = 40.00m,
                            Description = "Classic Swedish kanelbulle",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-mccafe-kanelbulle:nutrition-calculator-tile",
                            Name = "Cinnamon Bun"
                        },
                        new
                        {
                            Id = 30,
                            BasePrice = 32.00m,
                            Description = "Moist chocolate muffin",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-mccafe-muffinchoklad:nutrition-calculator-tile",
                            Name = "Chocolate Muffin"
                        },
                        new
                        {
                            Id = 31,
                            BasePrice = 32.00m,
                            Description = "Chocolate-glazed mini donut",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-mccafe-mini-donutchoklad:nutrition-calculator-tile",
                            Name = "MiniDonut Choklad"
                        },
                        new
                        {
                            Id = 32,
                            BasePrice = 18.00m,
                            Description = "Fresh apple snack pack",
                            ImageUrl = "https://s7d1.scene7.com/is/image/mcdonalds/mcd-sv-products-accessories-apples:nutrition-calculator-tile",
                            Name = "Apple Slices"
                        },
                        new
                        {
                            Id = 33,
                            BasePrice = 40.00m,
                            Description = "Very  cold",
                            Name = "Beer"
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 1,
                            Required = true
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 2,
                            Required = false
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 1,
                            Required = true
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 2,
                            Required = false
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 3,
                            Required = false
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 15,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 17,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 18,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 20,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 21,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 23,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 24,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 25,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 26,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 27,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 28,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 29,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 30,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 31,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 32,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 33,
                            TagId = 7
                        },
                        new
                        {
                            ProductId = 33,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small",
                            PriceModifier = 0m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium",
                            PriceModifier = 4.99m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large",
                            PriceModifier = 9.99m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Small",
                            PriceModifier = 0m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Medium",
                            PriceModifier = 4.99m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Large",
                            PriceModifier = 9.99m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "Small",
                            PriceModifier = 0m,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 8,
                            Name = "Medium",
                            PriceModifier = 4.99m,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Large",
                            PriceModifier = 9.99m,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "6",
                            PriceModifier = 0m,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 11,
                            Name = "8",
                            PriceModifier = 4.99m,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "10",
                            PriceModifier = 9.99m,
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Burgers",
                            TaxRate = 1.12m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drinks",
                            TaxRate = 1.12m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sides",
                            TaxRate = 1.12m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Desserts",
                            TaxRate = 1.12m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hot drinks",
                            TaxRate = 1.12m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Combo",
                            TaxRate = 1m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Alcohol",
                            TaxRate = 1.25m
                        });
                });

            modelBuilder.Entity("ComboComboGroup", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.ComboGroup", null)
                        .WithMany()
                        .HasForeignKey("ComboGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodOperator.Api.Entities.Combo", null)
                        .WithMany()
                        .HasForeignKey("CombosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboGroup", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.ComboProduct", "DefaultComboProduct")
                        .WithMany()
                        .HasForeignKey("DefaultComboProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultComboProduct");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboProduct", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.ComboGroup", "ComboGroup")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ComboGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FastFoodOperator.Api.Entities.Combo", "Combo")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FastFoodOperator.Api.Entities.ProductVariant", "DefaultProductVariant")
                        .WithMany()
                        .HasForeignKey("DefaultVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FastFoodOperator.Api.Entities.Product", "Product")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("ComboGroup");

                    b.Navigation("DefaultProductVariant");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboTag", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Combo", "Combo")
                        .WithMany("Tags")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodOperator.Api.Entities.Tag", "Tag")
                        .WithMany("ComboTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.OrderCombo", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Order", "Order")
                        .WithMany("OrderCombos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.OrderProduct", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductIngredient", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodOperator.Api.Entities.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductTag", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodOperator.Api.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ProductVariant", b =>
                {
                    b.HasOne("FastFoodOperator.Api.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Combo", b =>
                {
                    b.Navigation("ComboProducts");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.ComboGroup", b =>
                {
                    b.Navigation("ComboProducts");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Order", b =>
                {
                    b.Navigation("OrderCombos");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Product", b =>
                {
                    b.Navigation("ComboProducts");

                    b.Navigation("ProductIngredients");

                    b.Navigation("Tags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("FastFoodOperator.Api.Entities.Tag", b =>
                {
                    b.Navigation("ComboTags");

                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
